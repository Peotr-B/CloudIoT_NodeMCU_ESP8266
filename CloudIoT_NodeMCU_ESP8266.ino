/*28апр25
https://microkontroller.ru/esp8266-projects/nachalo-raboty-s-oblakom-arduino-cloud-iot-s-pomoshhyu-nodemcu-esp8266/?ysclid=m59jqakz8w209888156
Начало работы с облаком Arduino (Cloud IoT) с помощью NodeMCU ESP8266
*/

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/b606d5a5-ac9b-48d4-a761-73ad26ccef07 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLight lED1;
  CloudSwitch led_switch;
  CloudTemperatureSensor temperatureC;
  CloudTemperatureSensor temperatureF;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "arduino_secrets.h"
#include "thingProperties.h"
#include <OneWire.h>
#include <DallasTemperature.h>

// GPIO where the DS18B20 is connected to
const int oneWireBus = 4;  

// Setup a oneWire instance to communicate with any OneWire devices
OneWire oneWire(oneWireBus);

// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);

//DHT dht(dht_dpin, DHTTYPE); 
int LED = D3;
int C;  //Upravlenie znacheniem avarijnoy signalizacii

void setup() {
  // Initialize serial and wait for port to open:
  
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);
    
  C = 40; //avarijnoe znachenie temperatury
  
  pinMode(LED, OUTPUT);
  delay(1000);
  
  sensors.begin();
  delay(1000);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

}

void loop() {
  ArduinoCloud.update();
  // Your code here 
 sensors.requestTemperatures(); 
 temperatureC = sensors.getTempCByIndex(0);
 temperatureF = sensors.getTempFByIndex(0);

  if(temperatureC > C){
    digitalWrite(LED, HIGH);
    }
  else{
    digitalWrite(LED, LOW);
    }
}

/*
  Since TemperatureC is READ_WRITE variable, onTemperatureCChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureCChange()  {
  // Add your code here to act upon TemperatureC change
}

/*
  Since TemperatureF is READ_WRITE variable, onTemperatureFChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureFChange()  {
  // Add your code here to act upon TemperatureF change
}

/*
  Since LedSwitch is READ_WRITE variable, onLedSwitchChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLedSwitchChange()  {
  // Add your code here to act upon LedSwitch change
  if(led_switch){
  //  digitalWrite(LED, HIGH);
    C=20;                        //proverochnoe znachenie temperatury
  }
  else{
  //  digitalWrite(LED, LOW);
    C=40;                        //avarijnoe znachenie temperatury
  }
}
